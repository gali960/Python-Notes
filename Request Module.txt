Requests gets information but doenst parse it. For parsing you do bs4.

Para descargar imagenes:
import requests

r = requests.get('https://imgs.xkcd.com/comics/python.png')
#este metodo de get agarra el contenido del url

with open('comic.png','wb') as f:
    f.write(r.content) #r.content se refiere al contenido de r

print(r.status_code) te va a tirar el http status:
1xx informational response – the request was received, continuing process
2xx successful – the request was successfully received, understood, and accepted
3xx redirection – further action needs to be taken in order to complete the request
4xx client error – the request contains bad syntax or cannot be fulfilled
5xx server error – the server failed to fulfil an apparently valid reques

r.ok te evalua automaticamente el estado del objeto en el url. Puedes hasta hacer un programa
para que te envie un correo si el r.ok == False. Ah si el r.ok te tira un boolean

Any word after the question mark (?) in a URL is considered to be a parameter 
which can hold values. The value for the corresponding parameter is given after 
the symbol "equals" (=). Multiple parameters can be passed 
through the URL by separating them with multiple "&"

Por ejemplo:

payload = {'page' : 2, 'count': 25} #tiene que ser diccionario
r = requests.get('https://httpbin.org/get', params = payload)

print(r.url)
>>>https://httpbin.org/get?page=2&count=25

Si quieres por ejemplo fill out a form in a url puedes hacerlo asi:
payload = {'username' : 'gian', 'password': 'testing'}
r = requests.post('https://httpbin.org/post', data = payload)

print(r.text)
#te lo imprime en texto libre

#El tema con esto es que tienes que inspeccionar el html del url para ver que valores espera
el form a llenar

Look up "json response". In essence a json esponse (r.json() en nuestro ejemplo) te tira
la respuesta en dictionary form que puedes acceder de manera mas facil que texto libre,
por ejemplo:

r_dict = r.json()

print(r_dict['form'])
json response are common with APIs

For login:
-form based authentication
-basic authentication: you have to specify the credentials in the url you want to test against
por ejemplo:

r = requests.get('https://httpbin.org/basic-auth/corey/testing',auth=('corey','testing'))

print(r)
>>>200 # o sea que autentico cool, saldria 4xx si no autentica bien

print(r.text)
>>>{
  "authenticated": true, 
  "user": "corey"
}

A veces los requests pueden hang indifinetely asi que puedes setear un timeout de la siguiente
manera:
r = requests.get('https://httpbin.org/delay/4',timeout=3)

Bearer authentication (also called token authentication) is an HTTP authentication scheme that involves security tokens called bearer tokens. 
The name “Bearer authentication” can be understood as “give access to the bearer of this token.” The bearer token is a cryptic string, usually 
generated by the server in response to a login request. The client must send this token in the Authorization header when making requests to protected resources

REST (REpresentation State Transfer) is a protocol, or 'language', that applications can use for their APIs. Basically it allows a 
developer to perform commands or exchange data with a service over a network (eg. the Internet).
RESTful simply means a service provides a REST interface that a developer can communicate with.
How does it work? REST uses standard HTTP commands. While your web browser might use the GET command to retrieve a 
file or web page, or the POST command to submit the contents of a form, REST uses GET to retrieve data, POST to update data, 
PUT to create data, and DELETE to remove data. Usually what happens is the application makes a connection with the web server, sends the 
HTTP command (with any parameters or data required), and receives the result in the response, doing whatever it needs to with the result. 
HTTP is a text-based protocol, so the response is always text; but it could be plain text, base64-encoded binary, JSON, XML or another format, 
so the developer using the REST interface needs to read the interface documentation to know what commands are available, required parameters, 
format of the result data etc.

https://oauthdebugger.com/ to test ouath


client_id=00000003-0000-0ff1-ce00-000000000000
response_mode=form_post




